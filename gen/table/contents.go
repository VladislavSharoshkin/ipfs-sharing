//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Contents = newContentsTable("", "contents", "")

type contentsTable struct {
	sqlite.Table

	//Columns
	ID       sqlite.ColumnInteger
	Name     sqlite.ColumnString
	Cid      sqlite.ColumnString
	ParentID sqlite.ColumnInteger
	From     sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ContentsTable struct {
	contentsTable

	EXCLUDED contentsTable
}

// AS creates new ContentsTable with assigned alias
func (a ContentsTable) AS(alias string) *ContentsTable {
	return newContentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ContentsTable with assigned schema name
func (a ContentsTable) FromSchema(schemaName string) *ContentsTable {
	return newContentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ContentsTable with assigned table prefix
func (a ContentsTable) WithPrefix(prefix string) *ContentsTable {
	return newContentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ContentsTable with assigned table suffix
func (a ContentsTable) WithSuffix(suffix string) *ContentsTable {
	return newContentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newContentsTable(schemaName, tableName, alias string) *ContentsTable {
	return &ContentsTable{
		contentsTable: newContentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newContentsTableImpl("", "excluded", ""),
	}
}

func newContentsTableImpl(schemaName, tableName, alias string) contentsTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		NameColumn     = sqlite.StringColumn("name")
		CidColumn      = sqlite.StringColumn("cid")
		ParentIDColumn = sqlite.IntegerColumn("parent_id")
		FromColumn     = sqlite.StringColumn("from")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn, CidColumn, ParentIDColumn, FromColumn}
		mutableColumns = sqlite.ColumnList{NameColumn, CidColumn, ParentIDColumn, FromColumn}
	)

	return contentsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Name:     NameColumn,
		Cid:      CidColumn,
		ParentID: ParentIDColumn,
		From:     FromColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
